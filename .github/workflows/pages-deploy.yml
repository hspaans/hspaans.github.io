---
name: "Build and Deploy"
on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - .devcontainer
      - .gitignore
      - .vscode
      - README.md
      - LICENSE
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

# Environment variables used in the workflow
env:
  PYTHON_VERSION: "3.12"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          # submodules: true
          # If using the 'assets' git submodule from Chirpy Starter, uncomment above
          # (See: https://github.com/cotes2020/chirpy-starter/tree/main/assets)

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --user -e . ablog myst_parser sphinx~=8.2.0 sphinxcontrib-mermaid sphinxcontrib-googleanalytics sphinx-copybutton sphinx-toolbox sphinx_sitemap furo

      - name: Run Sphinx build for html
        run: |
          sphinx-build -b html docs build/html
        env:
          GOOGLE_ANALYTICS_ID: ${{ vars.GOOGLE_ANALYTICS_ID }}

      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: "build/html"

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install yamllint pymarkdownlint rstcheck

      - name: Lint with yamllint
        run: yamllint --format github `git ls-files '*.yml' '*.yaml'`

      - name: Add problem matcher
        run: echo "::add-matcher::.github/annotations/pymarkdown-problem-matcher.json"

      - name: Lint with pymarkdownlint
        run: pymarkdownlnt scan `git ls-files '*.md'`

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    needs:
      - build
      - lint

    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
